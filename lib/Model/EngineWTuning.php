<?php
/**
 * EngineWTuning
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RemapDB REST API Documentation
 *
 * Vehicle Tuning Database API - For Tuning services and Tuners.  Access comprehensive vehicle details, including types, manufacturers, models, engines, ECU and TCU info, tuning tools, dyno charts, and available tuning or remap stages with their performance gains.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.64
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EngineWTuning Class Doc Comment
 *
 * @category Class
 * @description Engine object
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EngineWTuning implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'engine_w_tuning';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'slug' => 'string',
        'engine_code' => 'string',
        'year' => 'int',
        'capacity' => 'int',
        'cylinders' => 'int',
        'engine_type' => 'string',
        'fuel' => 'string',
        'ecus' => '\Swagger\Client\Model\EngineEcu[]',
        'tcus' => '\Swagger\Client\Model\EngineTcu[]',
        'performance' => '\Swagger\Client\Model\EnginePerformance',
        'tuning' => '\Swagger\Client\Model\EngineTuning'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'slug' => null,
        'engine_code' => null,
        'year' => null,
        'capacity' => null,
        'cylinders' => null,
        'engine_type' => null,
        'fuel' => null,
        'ecus' => null,
        'tcus' => null,
        'performance' => null,
        'tuning' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'slug' => 'slug',
        'engine_code' => 'engine_code',
        'year' => 'year',
        'capacity' => 'capacity',
        'cylinders' => 'cylinders',
        'engine_type' => 'engine_type',
        'fuel' => 'fuel',
        'ecus' => 'ecus',
        'tcus' => 'tcus',
        'performance' => 'performance',
        'tuning' => 'tuning'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'slug' => 'setSlug',
        'engine_code' => 'setEngineCode',
        'year' => 'setYear',
        'capacity' => 'setCapacity',
        'cylinders' => 'setCylinders',
        'engine_type' => 'setEngineType',
        'fuel' => 'setFuel',
        'ecus' => 'setEcus',
        'tcus' => 'setTcus',
        'performance' => 'setPerformance',
        'tuning' => 'setTuning'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'slug' => 'getSlug',
        'engine_code' => 'getEngineCode',
        'year' => 'getYear',
        'capacity' => 'getCapacity',
        'cylinders' => 'getCylinders',
        'engine_type' => 'getEngineType',
        'fuel' => 'getFuel',
        'ecus' => 'getEcus',
        'tcus' => 'getTcus',
        'performance' => 'getPerformance',
        'tuning' => 'getTuning'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['slug'] = isset($data['slug']) ? $data['slug'] : null;
        $this->container['engine_code'] = isset($data['engine_code']) ? $data['engine_code'] : null;
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
        $this->container['capacity'] = isset($data['capacity']) ? $data['capacity'] : null;
        $this->container['cylinders'] = isset($data['cylinders']) ? $data['cylinders'] : null;
        $this->container['engine_type'] = isset($data['engine_type']) ? $data['engine_type'] : null;
        $this->container['fuel'] = isset($data['fuel']) ? $data['fuel'] : null;
        $this->container['ecus'] = isset($data['ecus']) ? $data['ecus'] : null;
        $this->container['tcus'] = isset($data['tcus']) ? $data['tcus'] : null;
        $this->container['performance'] = isset($data['performance']) ? $data['performance'] : null;
        $this->container['tuning'] = isset($data['tuning']) ? $data['tuning'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Engine ID.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Engine name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug URL-friendly name (slug).
     *
     * @return $this
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets engine_code
     *
     * @return string
     */
    public function getEngineCode()
    {
        return $this->container['engine_code'];
    }

    /**
     * Sets engine_code
     *
     * @param string $engine_code Engine code.
     *
     * @return $this
     */
    public function setEngineCode($engine_code)
    {
        $this->container['engine_code'] = $engine_code;

        return $this;
    }

    /**
     * Gets year
     *
     * @return int
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int $year Year of manufacture.
     *
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets capacity
     *
     * @return int
     */
    public function getCapacity()
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     *
     * @param int $capacity Engine capacity in cubic cm.
     *
     * @return $this
     */
    public function setCapacity($capacity)
    {
        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets cylinders
     *
     * @return int
     */
    public function getCylinders()
    {
        return $this->container['cylinders'];
    }

    /**
     * Sets cylinders
     *
     * @param int $cylinders Number of cylinders.
     *
     * @return $this
     */
    public function setCylinders($cylinders)
    {
        $this->container['cylinders'] = $cylinders;

        return $this;
    }

    /**
     * Gets engine_type
     *
     * @return string
     */
    public function getEngineType()
    {
        return $this->container['engine_type'];
    }

    /**
     * Sets engine_type
     *
     * @param string $engine_type Engine type.
     *
     * @return $this
     */
    public function setEngineType($engine_type)
    {
        $this->container['engine_type'] = $engine_type;

        return $this;
    }

    /**
     * Gets fuel
     *
     * @return string
     */
    public function getFuel()
    {
        return $this->container['fuel'];
    }

    /**
     * Sets fuel
     *
     * @param string $fuel Name of the fuel.
     *
     * @return $this
     */
    public function setFuel($fuel)
    {
        $this->container['fuel'] = $fuel;

        return $this;
    }

    /**
     * Gets ecus
     *
     * @return \Swagger\Client\Model\EngineEcu[]
     */
    public function getEcus()
    {
        return $this->container['ecus'];
    }

    /**
     * Sets ecus
     *
     * @param \Swagger\Client\Model\EngineEcu[] $ecus List of ECU's used in this engine.
     *
     * @return $this
     */
    public function setEcus($ecus)
    {
        $this->container['ecus'] = $ecus;

        return $this;
    }

    /**
     * Gets tcus
     *
     * @return \Swagger\Client\Model\EngineTcu[]
     */
    public function getTcus()
    {
        return $this->container['tcus'];
    }

    /**
     * Sets tcus
     *
     * @param \Swagger\Client\Model\EngineTcu[] $tcus List of TCU's used in this engine.
     *
     * @return $this
     */
    public function setTcus($tcus)
    {
        $this->container['tcus'] = $tcus;

        return $this;
    }

    /**
     * Gets performance
     *
     * @return \Swagger\Client\Model\EnginePerformance
     */
    public function getPerformance()
    {
        return $this->container['performance'];
    }

    /**
     * Sets performance
     *
     * @param \Swagger\Client\Model\EnginePerformance $performance performance
     *
     * @return $this
     */
    public function setPerformance($performance)
    {
        $this->container['performance'] = $performance;

        return $this;
    }

    /**
     * Gets tuning
     *
     * @return \Swagger\Client\Model\EngineTuning
     */
    public function getTuning()
    {
        return $this->container['tuning'];
    }

    /**
     * Sets tuning
     *
     * @param \Swagger\Client\Model\EngineTuning $tuning tuning
     *
     * @return $this
     */
    public function setTuning($tuning)
    {
        $this->container['tuning'] = $tuning;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
